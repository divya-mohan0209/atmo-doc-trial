"use strict";(self.webpackChunkatmo_trial_doc=self.webpackChunkatmo_trial_doc||[]).push([[5022],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return b}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),b=a,f=m["".concat(u,".").concat(b)]||m[b]||s[b]||o;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4540:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],i={},u="Example Runnable",c={unversionedId:"atmo/runnable-api/example-runnable",id:"atmo/runnable-api/example-runnable",isDocsHomePage:!1,title:"Example Runnable",description:"Here is an example of a Runnable, written in Rust.",source:"@site/docs/atmo/runnable-api/example-runnable.md",sourceDirName:"atmo/runnable-api",slug:"/atmo/runnable-api/example-runnable",permalink:"/atmo-doc-trial/docs/atmo/runnable-api/example-runnable",editUrl:"https://github.com/suborbital/docs/edit/master/atmo-trial-docs/docs/atmo/runnable-api/example-runnable.md",tags:[],version:"current",lastUpdatedAt:1638861026,formattedLastUpdatedAt:"12/7/2021",frontMatter:{},sidebar:"docs",previous:{title:"Accessing cache",permalink:"/atmo-doc-trial/docs/atmo/runnable-api/cache"},next:{title:"Static files",permalink:"/atmo-doc-trial/docs/atmo/runnable-api/file"}},p=[],s={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"example-runnable"},"Example Runnable"),(0,o.kt)("p",null,"Here is an example of a Runnable, written in Rust."),(0,o.kt)("p",null,'{% hint style="info" %}\nThe ',(0,o.kt)("inlineCode",{parentName:"p"},"subo")," CLI tool will automatically create new Runnables for you with the ",(0,o.kt)("inlineCode",{parentName:"p"},"subo create runnable")," command.\n{% endhint %}"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use suborbital::runnable::*;\nuse suborbital::{req, util};\n\nstruct Foobar{}\n\nimpl Runnable for Foobar {\n    fn run(&self, _: Vec<u8>) -> Result<Vec<u8>, RunErr> {\n        let body = req::body_raw();\n        let body_string = util::to_string(body);\n\n        Ok(String::from(format!("hello {}", body_string)).as_bytes().to_vec())\n    }\n}\n\n\n// initialize the runner, do not edit below //\nstatic RUNNABLE: &Foobar = &Foobar{};\n\n#[no_mangle]\npub extern fn init() {\n    use_runnable(RUNNABLE);\n}\n')),(0,o.kt)("p",null,"This Runnable uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," namespace to fetch the body of the HTTP request being handled, and then returns it. To learn about all of the Runnable API namespaces, read on!"))}m.isMDXComponent=!0}}]);