"use strict";(self.webpackChunkatmo_trial_doc=self.webpackChunkatmo_trial_doc||[]).push([[8546],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||c;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<c;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},238:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var a=n(7462),r=n(3366),c=(n(7294),n(3905)),o=["components"],i={},l="Accessing cache",u={unversionedId:"atmo/runnable-api/cache",id:"atmo/runnable-api/cache",isDocsHomePage:!1,title:"Accessing cache",description:"Runnables can access an attached cache \\(such as Redis\\) using the cache namespace of the Runnable API. Atmo will configure the cache, and will bind it to the Runnable at runtime. Atmo provides a default in-memory cache if no external cache is connected.",source:"@site/docs/atmo/runnable-api/cache.md",sourceDirName:"atmo/runnable-api",slug:"/atmo/runnable-api/cache",permalink:"/docs/atmo/runnable-api/cache",editUrl:"https://github.com/suborbital/docs/edit/master/atmo-trial-docs/docs/atmo/runnable-api/cache.md",tags:[],version:"current",lastUpdatedAt:1638861026,formattedLastUpdatedAt:"12/7/2021",frontMatter:{},sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/atmo/runnable-api/authentication"},next:{title:"Example Runnable",permalink:"/docs/atmo/runnable-api/example-runnable"}},p=[{value:"Set",id:"set",children:[],level:2},{value:"Get",id:"get",children:[],level:2}],s={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,c.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"accessing-cache"},"Accessing cache"),(0,c.kt)("p",null,"Runnables can access an attached cache ","(","such as Redis",")"," using the ",(0,c.kt)("inlineCode",{parentName:"p"},"cache")," namespace of the Runnable API. Atmo will configure the cache, and will bind it to the Runnable at runtime. Atmo provides a default in-memory cache if no external cache is connected."),(0,c.kt)("p",null,"Documentation for connecting an external cache to Atmo is coming soon."),(0,c.kt)("p",null,"For Rust, these methods are available under the ",(0,c.kt)("inlineCode",{parentName:"p"},"cache")," module, for example ",(0,c.kt)("inlineCode",{parentName:"p"},"cache::get()"),". For Swift, they are prefixed with ",(0,c.kt)("inlineCode",{parentName:"p"},"Cache"),", for example ",(0,c.kt)("inlineCode",{parentName:"p"},"Suborbital.CacheGet()"),". For TypeScript/AssemblyScript, they are prefixed with ",(0,c.kt)("inlineCode",{parentName:"p"},"cache"),", for example ",(0,c.kt)("inlineCode",{parentName:"p"},"import { cacheGet } from '@suborbital/suborbital'")),(0,c.kt)("p",null,"The following namespace methods are available:"),(0,c.kt)("h2",{id:"set"},"Set"),(0,c.kt)("p",null,"Set a given key's value in the cache. The provided TTL is in seconds."),(0,c.kt)("p",null,"Rust:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn set(key: &str, val: Vec<u8>, ttl: i32)\n")),(0,c.kt)("p",null,"AssemblyScript:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"function cacheSet(key: string, value: ArrayBuffer, ttl: i32): void\n")),(0,c.kt)("p",null,"Swift:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-swift"},"public func CacheSet(key: String, value: String, ttl: Int)\n")),(0,c.kt)("h2",{id:"get"},"Get"),(0,c.kt)("p",null,"Get the provided key from the cache."),(0,c.kt)("p",null,"Rust:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn get(key: &str) -> Result<Vec<u8>, RunErr>\n")),(0,c.kt)("p",null,"AssemblyScript:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"function cacheGet(key: string): ArrayBuffer\n")),(0,c.kt)("p",null,"Swift:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-swift"},"public func CacheGet(key: String) -> String\n")),(0,c.kt)("p",null,"Additional cache operations are coming soon."))}m.isMDXComponent=!0}}]);