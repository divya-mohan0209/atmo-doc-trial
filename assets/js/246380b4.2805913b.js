"use strict";(self.webpackChunkatmo_trial_doc=self.webpackChunkatmo_trial_doc||[]).push([[1598],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(o,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(f,u(u({ref:t},s),{},{components:n})):r.createElement(f,u({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,u=new Array(l);u[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,u[1]=i;for(var p=2;p<l;p++)u[p]=n[p];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4130:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),u=["components"],i={},o="Handling requests",p={unversionedId:"atmo/runnable-api/request",id:"atmo/runnable-api/request",isDocsHomePage:!1,title:"Handling requests",description:"When a Runnable is used to handle an HTTP request, Atmo will bind that request to the Runnable. The req namespace of the Runnable API can then be used to access all of the information about the request. Note if the Runnable is not being used to handle a request, then all methods in the req namespace will return empty or an error.",source:"@site/docs/atmo/runnable-api/request.md",sourceDirName:"atmo/runnable-api",slug:"/atmo/runnable-api/request",permalink:"/atmo-doc-trial/docs/atmo/runnable-api/request",editUrl:"https://github.com/suborbital/docs/edit/master/atmo-trial-docs/docs/atmo/runnable-api/request.md",tags:[],version:"current",lastUpdatedAt:1638861026,formattedLastUpdatedAt:"12/7/2021",frontMatter:{},sidebar:"docs",previous:{title:"Structured logging",permalink:"/atmo-doc-trial/docs/atmo/runnable-api/logging"},next:{title:"Modifying responses",permalink:"/atmo-doc-trial/docs/atmo/runnable-api/response"}},s=[{value:"State",id:"state",children:[],level:2},{value:"Method",id:"method",children:[],level:2},{value:"URL",id:"url",children:[],level:2},{value:"ID",id:"id",children:[],level:2},{value:"Body",id:"body",children:[],level:2},{value:"Body Field",id:"body-field",children:[],level:2},{value:"Header",id:"header",children:[],level:2},{value:"URL Parameter",id:"url-parameter",children:[],level:2}],c={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,u);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"handling-requests"},"Handling requests"),(0,l.kt)("p",null,"When a Runnable is used to handle an HTTP request, Atmo will bind that request to the Runnable. The ",(0,l.kt)("inlineCode",{parentName:"p"},"req")," namespace of the Runnable API can then be used to access all of the information about the request. Note if the Runnable is not being used to handle a request, then all methods in the ",(0,l.kt)("inlineCode",{parentName:"p"},"req")," namespace will return empty or an error."),(0,l.kt)("p",null,"For Rust, these methods are available under the ",(0,l.kt)("inlineCode",{parentName:"p"},"req")," module, for example ",(0,l.kt)("inlineCode",{parentName:"p"},"req::method()"),". For Swift, they are prefixed with ",(0,l.kt)("inlineCode",{parentName:"p"},"Req"),", for example ",(0,l.kt)("inlineCode",{parentName:"p"},"Suborbital.ReqMethod()"),". For TypeScript/AssemblyScript, they are prefixed with ",(0,l.kt)("inlineCode",{parentName:"p"},"req"),", for example ",(0,l.kt)("inlineCode",{parentName:"p"},"import { reqState } from '@suborbital/suborbital'")),(0,l.kt)("p",null,"The following namespace methods are available:"),(0,l.kt)("h2",{id:"state"},"State"),(0,l.kt)("p",null,"Returns the value from ",(0,l.kt)("a",{parentName:"p",href:"/atmo-doc-trial/docs/atmo/usage/managing-state"},"request state")," for the provided key:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn state(key: &str) -> Option<String>\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqState(key: string): string\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func State(key: String) -> String\n")),(0,l.kt)("h2",{id:"method"},"Method"),(0,l.kt)("p",null,"Returns the HTTP method for the request:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn method() -> String\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqMethod(): string\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func ReqMethod() -> String\n")),(0,l.kt)("h2",{id:"url"},"URL"),(0,l.kt)("p",null,"Returns the full URL of the request:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn url() -> String\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqURL(): string\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func ReqURL() -> String\n")),(0,l.kt)("h2",{id:"id"},"ID"),(0,l.kt)("p",null,"Returns the unique ID assigned to the request by Atmo:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn id() -> String\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqID(): string\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func ReqID() -> String\n")),(0,l.kt)("h2",{id:"body"},"Body"),(0,l.kt)("p",null,"Returns the full request body as bytes:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn body_raw() -> Vec<u8>\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqBody(): ArrayBuffer\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func ReqBodyRaw() -> String\n")),(0,l.kt)("h2",{id:"body-field"},"Body Field"),(0,l.kt)("p",null,"Returns the value for the provided key, if the request body is formatted as JSON:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn body_field(key: &str) -> String\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqBodyField(key: string): string\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func ReqBodyField(key: String) -> String\n")),(0,l.kt)("h2",{id:"header"},"Header"),(0,l.kt)("p",null,"Returns the header value for the provided key:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn header(key: &str) -> String\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqHeader(key: string): string\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func ReqHeader(key: String) -> String\n")),(0,l.kt)("h2",{id:"url-parameter"},"URL Parameter"),(0,l.kt)("p",null,"Returns the URL parameter for the provided key, for example ",(0,l.kt)("inlineCode",{parentName:"p"},"/api/v1/user/:uuid")),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn url_param(key: &str) -> String\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function reqURLParam(key: string): string\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func ReqParam(key: String) -> String\n")))}d.isMDXComponent=!0}}]);