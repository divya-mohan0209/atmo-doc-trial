"use strict";(self.webpackChunkatmo_trial_doc=self.webpackChunkatmo_trial_doc||[]).push([[1745],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5246:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s="Creating handlers",u={unversionedId:"atmo/usage/creating-handlers",id:"atmo/usage/creating-handlers",isDocsHomePage:!1,title:"Creating handlers",description:'{% hint style="info" %}',source:"@site/docs/atmo/usage/creating-handlers.md",sourceDirName:"atmo/usage",slug:"/atmo/usage/creating-handlers",permalink:"/atmo-doc-trial/docs/atmo/usage/creating-handlers",editUrl:"https://github.com/suborbital/docs/edit/master/atmo-trial-docs/docs/atmo/usage/creating-handlers.md",tags:[],version:"current",lastUpdatedAt:1638861026,formattedLastUpdatedAt:"12/7/2021",frontMatter:{},sidebar:"docs",previous:{title:"Creating Runnables",permalink:"/atmo-doc-trial/docs/atmo/usage/creating-runnables"},next:{title:"Building a Bundle",permalink:"/atmo-doc-trial/docs/atmo/usage/building-a-bundle"}},c=[],p={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-handlers"},"Creating handlers"),(0,o.kt)("p",null,'{% hint style="info" %}\nIf you haven\'t created a project yet, see ',(0,o.kt)("a",{parentName:"p",href:"../getstarted/"},"Get started")," first.\n{% endhint %}"),(0,o.kt)("p",null,"Your project contains a ",(0,o.kt)("inlineCode",{parentName:"p"},"Directive.yaml")," file that controls your entire application. The Directive is included in the Runnable Bundle used by Atmo to run your application."),(0,o.kt)("p",null,"The Directive has some metadata such as a unique application identifier and a version number, as well as some handlers."),(0,o.kt)("p",null,"Each handler tells Atmo how to handle a ",(0,o.kt)("strong",{parentName:"p"},"resource.")," A resource is an input that Atmo makes available via HTTP endpoints, event handlers, and more. To start, Atmo supports handlers for HTTP requests, particulary designed to help building web APIs. Here is an example Directive:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"identifier: com.suborbital.test\nappVersion: v0.0.1\natmoVersion: v0.4.2\n\nhandlers:\n  - type: request\n    resource: /hello\n    method: POST\n    steps:\n      - group:\n        - fn: modify-url\n        - fn: helloworld-rs\n          as: hello\n      - fn: fetch-test\n        with:\n          url: modify-url\n          logme: hello\n")),(0,o.kt)("p",null,"This describes the application being constructed. It declares a resource ","(",(0,o.kt)("inlineCode",{parentName:"p"},"HTTP POST /hello"),")"," and a set of ",(0,o.kt)("inlineCode",{parentName:"p"},"steps")," to handle that request. The ",(0,o.kt)("inlineCode",{parentName:"p"},"steps")," are a set of Runnable functions to be ",(0,o.kt)("strong",{parentName:"p"},"composed")," when handling requests to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/hello")," endpoint."),(0,o.kt)("p",null,"There are two types of ",(0,o.kt)("inlineCode",{parentName:"p"},"step"),". The first step you see above is a ",(0,o.kt)("inlineCode",{parentName:"p"},"group"),", meaning that all of the functions in that group will be executed ",(0,o.kt)("strong",{parentName:"p"},"concurrently"),"."),(0,o.kt)("p",null,"The second step shown above is a single ",(0,o.kt)("inlineCode",{parentName:"p"},"fn")," , which calls a Runnable that uses the ",(0,o.kt)("a",{parentName:"p",href:"/atmo-doc-trial/docs/atmo/runnable-api/introduction"},"Runnable API")," to make an HTTP request. The API is continually evolving to include more capabilities. In addition to making HTTP requests, it includes logging, database connections, caching, and more."),(0,o.kt)("p",null,"The output of the final function in a handler is used as the response data for the request, by default. If you wish to use the output from a different function, you can include the ",(0,o.kt)("inlineCode",{parentName:"p"},"response")," option in your handler, listing the name of the function to use as a response. If the final step is a group, then the ",(0,o.kt)("inlineCode",{parentName:"p"},"response")," clause must be included."),(0,o.kt)("p",null,"For example: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n  - group:\n    - fn: modify-url\n    - fn: helloworld-rs\n      as: hello\n  - fn: fetch-test\n    with:\n      url: modify-url\n      logme: hello\nresponse: hello\n")),(0,o.kt)("p",null,"Your application can contain as many handlers as needed, and functions can be re-used among many handlers. Each Runnable in your project can be called by its name. The ",(0,o.kt)("inlineCode",{parentName:"p"},"subo")," tool will validate your directive to ensure it is not calling any Runnables that don't exist in your project."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"as")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," clauses shown above will be discussed ",(0,o.kt)("a",{parentName:"p",href:"/atmo-doc-trial/docs/atmo/usage/managing-state"},"next"),"."))}d.isMDXComponent=!0}}]);