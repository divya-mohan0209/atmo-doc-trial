"use strict";(self.webpackChunkatmo_trial_doc=self.webpackChunkatmo_trial_doc||[]).push([[1036],{3905:function(e,t,r){r.d(t,{Zo:function(){return i},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},i=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return r?n.createElement(f,u(u({ref:t},i),{},{components:r})):n.createElement(f,u({ref:t},i))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,u=new Array(l);u[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,u[1]=p;for(var s=2;s<l;s++)u[s]=r[s];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4287:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return i},default:function(){return m}});var n=r(7462),a=r(3366),l=(r(7294),r(3905)),u=["components"],p={},o="HTTP requests",s={unversionedId:"atmo/runnable-api/http",id:"atmo/runnable-api/http",isDocsHomePage:!1,title:"HTTP requests",description:"You can use the http namespace of the Runnable API to make HTTP requests from your Runnable code. These methods are currently the only way to access the network from Runnable code. Arbitrary socket and network access is not currently possible.",source:"@site/docs/atmo/runnable-api/http.md",sourceDirName:"atmo/runnable-api",slug:"/atmo/runnable-api/http",permalink:"/docs/atmo/runnable-api/http",editUrl:"https://github.com/suborbital/docs/edit/master/atmo-trial-docs/docs/atmo/runnable-api/http.md",tags:[],version:"current",lastUpdatedAt:1638861026,formattedLastUpdatedAt:"12/7/2021",frontMatter:{},sidebar:"docs",previous:{title:"GraphQL requests",permalink:"/docs/atmo/runnable-api/graphql-requests"},next:{title:"Structured logging",permalink:"/docs/atmo/runnable-api/logging"}},i=[{value:"GET",id:"get",children:[],level:2},{value:"POST",id:"post",children:[],level:2},{value:"PATCH",id:"patch",children:[],level:2},{value:"DELETE",id:"delete",children:[],level:2}],c={toc:i};function m(e){var t=e.components,r=(0,a.Z)(e,u);return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"http-requests"},"HTTP requests"),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"http")," namespace of the Runnable API to make HTTP requests from your Runnable code. These methods are currently the only way to access the network from Runnable code. Arbitrary socket and network access is not currently possible."),(0,l.kt)("p",null,"For Rust, these methods are available under the ",(0,l.kt)("inlineCode",{parentName:"p"},"http")," module, for example ",(0,l.kt)("inlineCode",{parentName:"p"},"http::get()"),". For Swift, they are prefixed with ",(0,l.kt)("inlineCode",{parentName:"p"},"Http"),", for example ",(0,l.kt)("inlineCode",{parentName:"p"},"Suborbital.HttpGet()")," For TypeScript/AssemblyScript, they are prefixed with ",(0,l.kt)("inlineCode",{parentName:"p"},"http"),", for example ",(0,l.kt)("inlineCode",{parentName:"p"},"import { httpPost } from '@suborbital/suborbital'")),(0,l.kt)("p",null,"The following namespace methods are available:"),(0,l.kt)("h2",{id:"get"},"GET"),(0,l.kt)("p",null,"Performs an HTTP GET request"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn get(url: &str, headers: Option<BTreeMap<&str, &str>>) -> Result<Vec<u8>, RunErr>\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function httpGet(url: string, headers: Map<string, string> | null): ArrayBuffer\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func HttpGet(url: String) -> String\n")),(0,l.kt)("h2",{id:"post"},"POST"),(0,l.kt)("p",null,"Performs an HTTP POST request:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn post(url: &str, body: Option<Vec<u8>>, headers: Option<BTreeMap<&str, &str>>) -> Result<Vec<u8>, RunErr>\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function httpPost(url: string, body: ArrayBuffer, headers: Map<string, string> | null): ArrayBuffer\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func HttpPost(url: String, body: String) -> String\n")),(0,l.kt)("h2",{id:"patch"},"PATCH"),(0,l.kt)("p",null,"Performs an HTTP PATCH request:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn patch(url: &str, body: Option<Vec<u8>>, headers: Option<BTreeMap<&str, &str>>) -> Result<Vec<u8>, RunErr>\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function httpPatch(url: string, body: ArrayBuffer, headers: Map<string, string> | null): ArrayBuffer\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func HttpPatch(url: String, body: String) -> String\n")),(0,l.kt)("h2",{id:"delete"},"DELETE"),(0,l.kt)("p",null,"Performs an HTTP DELETE request:"),(0,l.kt)("p",null,"Rust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn delete(url: &str, headers: Option<BTreeMap<&str, &str>>) -> Result<Vec<u8>, RunErr>\n")),(0,l.kt)("p",null,"AssemblyScript:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function httpDelete(url: string, headers: Map<string, string> | null): ArrayBuffer\n")),(0,l.kt)("p",null,"Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"public func HttpDelete(url: String) -> String\n")),(0,l.kt)("p",null,"Swift does not yet support passing headers to a request."))}m.isMDXComponent=!0}}]);